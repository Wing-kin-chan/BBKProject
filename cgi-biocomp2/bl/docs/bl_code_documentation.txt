
BIOCOMPUTING 2 COURSEWORK PROJECT 

BUSINESS LOGIC LAYER TECHNICAL SPECIFICATION DOCUMENT

TIINA TALTS 2022
BIOINFORMATICS MSC
BIRKBECK UL

Module Prof: Dr. Andrew Martin

************************************************************************************************

GENERAL PROJECT DIRECTORY LAYOUT
	(includes modified bl directory):

biocomp2/                    (Top directory)
|-- cgi-biocomp2             (All CGI scripts and layers under here)
|   |
|   |-- bl                           (The business logic layer)
|   |   |-- blapi.py                 (The API imported by the CGI scripts)
|   |   |-- businesslayer.py         (BL code used by blapi.py)
|   |   |-- sub_bl.py                (BL sub code used for precalculated data generation)
|   |   |-- getallcodingregions.txt  (precalculated data file)
|   |   |-- overallcodonfreqs.txt    (precalculated data file)
|   |   |-- docs                     (Documentation for the API plus your essay)
|   |   |    \--bl_code_documentation.txt
|   |   |    \--essay_BL_TT.pdf
|   |   |    \-- README.md    
|   |   |
|   |   \-- README.md        (A brief description of the contents of this directory)
|   |
|   |-- cgi                  (The front end CGI script)
|   |   |-- docs             (Documentation for the CGI script plus your essay)
|   |   |   \-- README.md
|   |   |-- htmlutils.py     (CGI code - imports ../bl/blapi.py)
|   |   |-- listall.py       (CGI code - imports ../bl/blapi.py)
|   |   \-- README.md        (A brief description of the contents of this directory)
|   |
|   |-- config.py            (Configuration file used by all python scripts)
|   |
|   |-- db                   (The database access layer)
|   |   |-- dbapi.py         (The API imported by the business layer)
|   |   |-- docs             (Documentation for the database plus your essay)
|   |   |   \-- README.md
|   |   |
|   |   \-- README.md        (A brief description of the contents of this directory)
|   |
|   \-- README.md            (A brief description of the overall structure)
|
|-- createdb                 (Code to populate the database)
|   |-- docs                 (Documentation on how to run the code)
|   |   \-- README.md
|   |
|   \-- README.md            (A brief description of the contents of this directory)
|
|-- html                     (HTML for the main page)
|   |-- css                  (CSS used by the pages and CGI scripts)
|   |   \-- biocomp2.css
|   |
|   |-- index.html
|   \-- README.md            (A brief description of the contents of this directory)
|
|-- install.sh               (Ideally a script to install everything)
\-- README.md                (An overall description of the project)

********************************************************************************************

CODE STRUCTURE OR CALL TREE:






































************************************************************************************************

CODE SPEC:

Program:    businesslayer
File:       businesslayer.py

Version:    V1.0
Date:       01.05.22
Function:   Obtain data stored in the database (DB) layer by calling the
            DB API functions and use the data in the functions to modify
            and calculate data to return for various tasks and searches
            for the FE

Copyright:  (c) Tiina Talts, MSc Student, Birkbeck UL, 2022
Author:     Tiina Talts
Address:    Institute of Structural and Molecular Biology
            Birkbeck University of London

--------------------------------------------------------------------------------------------------
Description:
============
Obtain data stored in the database (DB) layer by calling the DB API
functions and use the data in the functions to modify and calculate
data to return for various tasks and searches for the FE.
The various tasks that the code performs include:
-- return the complete DNA sequence with the coding regions specified
-- return the amino acid sequence with the coding DNA sequence
-- return codon usage frequencies within the coding region
-- return the overall codon usage within the chromoseme 10
-- return sticky-end restriction enzyme sites in the genomic DNA - i.e. in
   both coding and non-coding regions

--------------------------------------------------------------------------------------------------
Revision History:
=================
V1.0   01.05.22   Original   By: TT
"""


****************************** FUNCTIONS ************************************

def coding_region(accession):
    """
    For highlighting and extracting the coding region per entry.

    Input:  result  ----- The result returned by dbapi getAccession
                         function
    Return: (coding_highlighted, extractedCoding_region, accession,
                         complement, d_coding)
                         ---- A list containing the 'highlighted' coding
                         region (boundaries marked by {} within the original
                         DNA sequence), extracted coding region, its
                         respective accession identifier, complement 'Y/N',
                         and dictionary of coding boundaries

    01.05.22  Original   By: TT
    """

_______________________________________________________________

def aa_nt(accession):
    """
    For returning the amino acid sequence with the coding nucleotide or
    codon sequence.

    Input:  result       --- The result returned by dbapi getAccession
                         function
    Return: (zipped, nt_triplets, accession)
                         --- A list containing the nucleotide codon and
                         amino acid letter as a tuple, nucleotide codon
                         and its respective accession identifier

    01.05.22  Original   By: TT
    """
    
________________________________________________________________
   
def enz_table(accession):
    """
    For returning the return sticky-end restriction enzyme sites in the
    genomic DNA - i.e. in both coding and non-coding regions.

    Input:  result       --- The result returned by businesslayer
                         coding_region that in turn takes result from
                         dbapi getAccession function
    Return: (table_dic, 'List of noncutters: ', freq0, accession)
                         --- A list containing the restricion enzyme
                         cutting information as a dictionary, a list of
                         non-cutting enzymes and its respective accession
                         identifier

    01.05.22  Original   By: TT
    """
    
________________________________________________________________

def codonFreq_entry(accession):
    """
    For returning the codon usage frequencies for a particular entry.

    Input:  result                      --- The result returned by businesslayer
                                        aa_nt function and saved file with
                                        previously obtained data of all the codon
                                        frequencies of human chromosome 10
    Return: (d_entryFreq, accession)    --- A dictionary containing the unique
                                        codons for the entry coding region, its
                                        respective amino acid one letter code,
                                        codon usage frequency value per entry,
                                        codon usage frequency value per chromosome;
                                        and respective accession identifier for the entry 

    01.05.22  Original   By: TT
    """


****************************************************************************************
****************************************************************************************

  
Program:    blapi_real
File:       blapi_real.py

Version:    V1.0
Date:       01.05.22
Function:   This is the business logic API to obtain modified and
            calculated data from the businesslayer (BL) by calling the BL
            functions and return for various tasks and searches for the FE

Copyright:  (c) Tiina Talts, MSc Student, Birkbeck UL, 2022
Author:     Tiina Talts
Address:    Institute of Structural and Molecular Biology
            Birkbeck University of London

----------------------------------------------------------------------------------------------------
Description:
============
This is the business logic API to obtain modified and calculated data from
the businesslayer (BL) by calling the BL functions and return for various
tasks and searches for the FE
The various tasks that are called include:
-- return the complete DNA sequence with the coding regions specified
-- return the amino acid sequence with the coding DNA sequence
-- return codon usage frequencies within the coding region
-- return the overall codon usage within the chromoseme 10
-- return sticky-end restriction enzyme sites in the genomic DNA - i.e. in
   both coding and non-coding regions

-----------------------------------------------------------------------------------------------------
Revision History:
=================
V1.0   01.05.22   Original   By: TT
"""

****************************** FUNCTIONS ****************************************

def getAllEntries():
    """
    This is a function that calls the database API to do the SQL to 
    obtain the full list of entries.

    Input:  search   --- Search term as string entered from the webpage
    Return: (accession)
                     --- A list of strings of Accession identifiers
    
    """
    return(dbapi.getAllEntries())
_______________________________________________________________

def getByGeneID(query: str, resultslen: int):
    """
    Function that will pass name of the gene (in the chromosome file as
    '/gene=') as list of strings from db. This is marked as 'gene identifiers'
    in the requirements file. Can have zero to many result returns.
    Returns a list of strings for FE.

    Input:  search   --- Search term as string entered from the webpage
    Return: (gene_id)
                     --- A list of strings of gene name identifiers
    """
    return dbapi.getByGeneID(query, resultslen)
______________________________________________________________

def getByProtein(query: str, resultslen: int):
    """
    Function that will pass prot product name (in the chromosome file as
    '/product=') as list of strings from db. This is marked as
    'protein product name' in the requirements file. Can have zero to
    many result returns. Returns list of strings for FE

    Input:  search   --- Search term as string entered from the webpage
    Return: (product)
                     --- A list of strings of protein name identifiers
    """
    return dbapi.getByProduct(query, resultslen)
_____________________________________________________________

def getAccession(query: str):
    """
    Function that will pass accession number (in the chromosome file
    as 'ACCESSION') as string from db. This is marked as
    'Genbank accession' in the requirements file. Can have zero to one
    result returned. Returns a list of strings for search.
    If no result then returns message: 'Database error {}'

    Input:  search   --- Search term as string entered from the webpage
    Return: (accession)
                     --- A list of strings of accession identifiers
    """
    return dbapi.getAccession(query)
____________________________________________________________

def getByAccession(query: str, resultslen: int):
    """
    Function that will pass accession number (in the chromosome file as
    'ACCESSION') as string from db. This is marked as 'Genbank accession'
    in the requirements file. Can have zero to many result returns for
    a partial search term. Returns a list of strings for search.
    If no result then returns message: 'Database error {}'
    
    Input:  search   --- Partial search term as string entered from the webpage
    Return: (accession)
                     --- A list of strings of accession identifiers
    """
    return dbapi.getByAccession(query, resultslen) 
____________________________________________________________

def getByLocus(query: str, resultslen: int):
    """
    Function that will pass chromosomal location as a list of strings
    from db. In the chromosome file as '/map=' as given by 'source'.
    This is marked as 'chromosomal location' in the requirements file.
    Can have zero to many result returns. Returns list of strings for FE

    Input:  search   --- Search term as string entered from the webpage
    Return: (locus)
                     --- A list of strings of locus identifiers
    """
    return dbapi.getByLocus(query, resultslen) 
____________________________________________________________

def ntCoding_region(accession):
    """
    Function that will interact with a Blayer 'coding_region' function that
    takes accession_id, nt_seq[string], codon_start[int],
    exon_boundaries[list of int tuples] from the DBlayer and returns
    string of nt_seq with brackets indicating coding regions
    e.g. ATC{TGTGTCC}ATGTT, extracted coding region,
    corresponding accession_id & a list of coding boundaries.
    
    Input:  accession   --- Search term as string entered from the webpage
    
    Return: (coding_highlighted, extractedCoding_region, accession,
                        complement, d_coding)
                        --- A list of strings of 'coding region highlighted',
                        coding region extrcated, corresponding accession
                        identifier, complement 'Y/N'; and a dictionary of
                        coding regions
    """
    return bl.coding_region(accession)
___________________________________________________________

def aaNt_seqsAligned(accession):
    """
    Function that will interact with a Blayer function aa_nt that
    takes accession_id, aa_seq[string] and function coding_region
    with corresponding input from the DBlayer, and returns a list of
    tuples of nt triplet and corresponding aa letter; & corresponding
    accession_id
    
    Input:  accession   --- Search term as string entered from the webpage
    
    Return: (zipped1, nt_triplets, accession, zipped2, u_triplets)
                        --- A list of tuples of codons with their respective
                        amino acid one letter code, a list of codons,
                        corresponding accession identifier, a list of tuples
                        of codons where 'T' is replaced with 'U' and its
                        corresponding amino acid one letter code, a list of
                        codons where 'T' is replaced with 'U'
    """		
    return bl.aa_nt(accession)
___________________________________________________________

def entryCodon_freq(accession):
    """
    Function that will interact with a Blayer function codonFreq_entry
    that takes accession_id, extract data needed from a function aa_nt
    and saved .txt file with data derived previously from function
    codonFreq_chromosome10 and returns a list of codons for the entry,
    frequencies per codon per entry as float (%), frequencies per codon
    per chromosome as float (%), corresponding amino acid letter code;
    & corresponding accession_id for the entry

    Input:  accession   --- Search term as string entered from the webpage
    
    Return: (d_entryFreq, accession)
                        --- A dictionary containing the unique
                            codons for the entry coding region, its
                            respective amino acid one letter code,
                            codon usage frequency value per entry,
                            codon usage frequency value per chromosome;
                            and respective accession identifier for the entry
    """
    return bl.codonFreq_entry(accession)
___________________________________________________________

def restr_enz(accession):
    """
    Function that will interact with Blayer functions that return a
    dictionary of list of restriction enzyme cutting information
    that includes enzyme name; cutting site; cutting site length; cutting
    'offset' or positition within the cutting site where the enzyme cuts;
    cut positions across the enrty nucleotide sequence - non-coding region
    and coding region; cutting frequency; and a flag 'This is a good enzyme!'
    if the cutting position is located outside of the coding region: either
    before the start of the first coding region and/or after the end of the
    last coding region. The enzyme list consists of New England Biolabs (NEB)
    high fidelity (HF) sticky-end restriction enzymes that includes
    EcoRI, BamHI and BsuMI as XhoI its prototype.

    Input:  accession    --- Search term as string entered from the webpage

    Return: (table_dic, 'List of noncutters: ', freq0, accession)
                         --- A list containing the restricion enzyme
                         cutting information as a dictionary, a list of
                         non-cutting enzymes and its respective accession
                         identifier
    """
    return bl.enz_table(accession)



******************************************************************************************
******************************************************************************************



Program:    sub_bl
File:       sub_bl.py

Version:    V1.0
Date:       01.05.22
Function:   This is a sub code to obtain data stored in the database (DB)
            layer by calling the DB API functions and use the data in the
            functions to modify and calculate data to return a saved static
            files for various tasks for the BL

Copyright:  (c) Tiina Talts, MSc Student, Birkbeck UL, 2022
Author:     Tiina Talts
Address:    Institute of Structural and Molecular Biology
            Birkbeck University of London

----------------------------------------------------------------------------------------------
Description:
============
This is a sub code to obtain data stored in the database (DB)
layer by calling the DB API functions and use the data in the
functions to modify and calculate data to return a saved static
files for various tasks for the BL
The various tasks that the code performs include:
-- return the coding regions for DNA sequences in the database
   and save as a static file in the /bl directory
-- return the overall codon usage within the chromoseme 10
   and save as a static file in the /bl directory


-----------------------------------------------------------------------------------------------
Revision History:
=================
V1.0   01.05.22   Original   By: TT
"""

********************************** FUNCTIONS **********************************

def getAllCodingRegions():
    """
    For returning all the coding regions within the database of eligible
    entries from the human chromoseme 10.

    Input:  result       --- The result returned by dbapi getAllCodingRegions
                         function and by businesslayer coding_region function
    Return: (final_list) --- A list containing the extracted coding region
                         and its respective accession identifier for all
                         entries in the database

    01.05.22  Original   By: TT
    """
______________________________________________________________
   
def codonFreq_chromosome10():
    """
    For returning the codon usage frequencies for all the eligible entries
    from the human chromoseme 10.

    Input:  result       --- The result returned by dbapi getAllCodingRegions
                         function and by businesslayer aa_nt function
    Return: (zipped3)    --- A list containing the unique codons for all the
                         extracted coding regions and its respective frequency
                         value for all eligible entries in the human
                         chromosome 10 database

    01.05.22  Original   By: TT
    """
______________________________________________________________
  
def writeFile_overallcodonfreqs():
    """
    For creating file overallcodonfreqs.txt that is saved in the /bl directory.

    Function can be run from the command line with command
    'python sub_bl.py writeFile_overallcodonfreqs'
    
    Input:  result                  --- no input from command line needed -
                                    uses function codonFreq_chromosome10
                                    which in turn uses database function
                                    getAllCodingRegions
    Return: (overallcodonfreqs.txt) --- A text file containing the codon
                                    frequencies for all the extracted coding
                                    regions and its respective frequency value
                                    for all eligible entries in the human
                                    chromosome10 database

    01.05.22  Original   By: TT
    """
______________________________________________________________
   
def writeFile_getallcodingregions():
    """
    For creating file getallcodingregions.txt that is saved in the /bl directory.

    Function can be run from the command line with command
    'python sub_bl.py writeFile_getallcodingregions'
    
    Input:  result                    --- no input from command line needed -
                                      uses function getAllCodingRegions
                                      which in turn uses database function
                                      getAllCodingRegions
    Return: (getallcodingregions.txt) --- A text file containing the coding
                                      regions for all the eligible entries in
                                      the human chromosome10 database

    01.05.22  Original   By: TT
    """
   
